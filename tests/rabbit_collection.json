{
	"info": {
		"_postman_id": "c8cd5201-09be-4ee5-9b38-fe0a2f1317e0",
		"name": "rabbit",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Rabbit Cluster State",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get cluster Nodes\", function () {",
							"    if (!pm.environment.get(\"test_tries\")) {",
							"        console.log(\"Retries not set, first run, setting retries as \"+ pm.environment.get(\"retries\"));",
							"        pm.environment.set(\"test_tries\", pm.environment.get(\"retries\"));",
							"    }",
							"",
							"    var test_tries = pm.environment.get(\"test_tries\")",
							"    console.log(\"test tries remaining \"+ test_tries);",
							"",
							"    if (pm.response.code == 200 ) {",
							"        console.log(\"Response is success\")",
							"        var jsonData = pm.response.json();",
							"        var clusterState =  jsonData[0].cluster_state",
							"        ",
							"        clusterMembersCount = Object.keys(clusterState).length",
							"        if (clusterMembersCount == 3){",
							"            // We are half done here, lets still check if all are in running state",
							"            var rabbit_1 = clusterState[\"rabbit@rabbit-1\"];",
							"            var rabbit_2 = clusterState[\"rabbit@rabbit-2\"];",
							"            var rabbit_3 = clusterState[\"rabbit@rabbit-3\"];",
							"",
							"            if (\"running\" == rabbit_1 && \"running\" == rabbit_2  && \"running\" == rabbit_3) {",
							"                console.log(\"all rabbits clustered, we are done\")",
							"                return",
							"            }",
							"        }",
							"    }",
							"    ",
							"    //If we are here then either response code was not 200 or all three rabbits had not clustered",
							"    // Lets retry",
							"    if (test_tries > 1){",
							"        pm.environment.set(\"test_tries\", test_tries - 1);",
							"        setTimeout(function(){}, pm.environment.get(\"waittime\") );",
							"        postman.setNextRequest(request.name);",
							"    } else {",
							"        console.log(\"Retries exceeded, failing test\")",
							"        pm.environment.unset(\"test_tries\")",
							"        pm.expect.fail(\"Retries exceeded, failing test\")",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "guest",
							"type": "string"
						},
						{
							"key": "username",
							"value": "guest",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{nginx_url}}/api/vhosts",
					"host": [
						"{{nginx_url}}"
					],
					"path": [
						"api",
						"vhosts"
					]
				},
				"description": "    "
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "guest",
				"type": "string"
			},
			{
				"key": "username",
				"value": "guest",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}